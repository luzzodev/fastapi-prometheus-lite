from typing import Any

import pytest
from prometheus_client import CollectorRegistry

from fastapi_prometheus_lite.metrics.live_metrics import (
    GlobalActiveRequests,
)
from fastapi_prometheus_lite.metrics.post_metrics import (
    TotalRequests,
)
from fastapi_prometheus_lite.collectors.base import MetricsContext


@pytest.fixture
def registry():
    return CollectorRegistry()


@pytest.fixture
def base_scope() -> dict[str, Any]:
    # Minimal ASGI scope with method and path
    return {"type": "http", "method": "GET", "path": "/users"}


@pytest.fixture
def metrics_context():
    # Typical metrics context generated by middleware
    return {"status_code": 200, "request_duration": 1.5, "global_active_requests": 3}


@pytest.fixture
def scope_with_metrics(base_scope, metrics_context):
    # Embed metrics_context in scope as middleware does
    scope = base_scope.copy()
    scope["metrics_context"] = metrics_context
    return scope


# ---- Post-request collectors metrics ----
def test_request_counter_increments(registry, scope_with_metrics):
    labels = {"method": "GET", "handler": "/users", "status": "200"}
    ctx = MetricsContext(scope_with_metrics)
    rc = TotalRequests(group_unmatched_template=False, group_status_code=False, registry=registry)
    rc(ctx)

    val = registry.get_sample_value("http_requests_total", labels=labels)
    assert val == 1

    rc(ctx)
    val2 = registry.get_sample_value("http_requests_total", labels=labels)
    assert val2 == 2


# ---- Live collectors metrics ----
def test_live_requests_gauge_inc_and_dec(registry, base_scope):
    active_requests_collector = GlobalActiveRequests(registry=registry)
    active_requests_collector.update_scope({**base_scope})

    with active_requests_collector:
        val_inc = registry.get_sample_value("http_active_requests")
        assert val_inc == 1
    val_dec = registry.get_sample_value("http_active_requests")
    assert val_dec == 0
